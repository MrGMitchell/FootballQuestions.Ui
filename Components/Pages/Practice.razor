@page "/practice"
@rendermode InteractiveServer

@inject IConfiguration Configuration
@using System.Net.Http.Json
@using System.Text
@using FootballQuestions.Ui.Models
@using GenerativeAI
@using System.Net.Http.Headers
@using Newtonsoft.Json

@if (!quizQuestions.Any()) {
    <button class="btn btn-primary mt-2" @onclick="SendMessage" disabled="@isLoading">
        @if (isLoading)
        {
            <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
            <span> Loading...</span>
        }
        else
        {
            <span>Get Question</span>
        }
    </button>
}

@if (!string.IsNullOrEmpty(errorMessage)) {
    <div class="alert alert-danger mt-3" role="alert">
        @errorMessage
    </div>
}

@if (quizQuestions.Any()) {
    <div class="mt-3">
        @foreach (var question in quizQuestions){
            <div class="card mt-3">
                <div class="card-header">
                    <h5>@question.Question</h5>
                </div>
                <div class="card-body">
                    <div class="btn-group-vertical" role="group" aria-label="Vertical radio toggle button group">
                        <input type="radio" class="btn-check" name="choice" id="choice1" autocomplete="off">
                        <label class="btn btn-outline-success" for="choice1">@question.Choices.Choice1</label>
                        <input type="radio" class="btn-check" name="choice" id="choice2" autocomplete="off">
                        <label class="btn btn-outline-success" for="choice2">@question.Choices.Choice2</label>
                        <input type="radio" class="btn-check" name="choice" id="choice3" autocomplete="off">
                        <label class="btn btn-outline-success" for="choice3">@question.Choices.Choice3</label>
                        <input type="radio" class="btn-check" name="choice" id="choice4" autocomplete="off">
                        <label class="btn btn-outline-success" for="choice4">@question.Choices.Choice4</label>
                    </div>
                </div>
            </div>
        }
    </div>
}

@code {
    private string numberOfQuestions = "";
    private List<QuizQuestion> quizQuestions = new();
    private string errorMessage = "";
    private bool isLoading = false;
    private Choice choices = new();

    private async Task SendMessage()
    {
        using HttpClient client = new();

        client.DefaultRequestHeaders.Accept.Clear();
        client.DefaultRequestHeaders.Accept.Add(new MediaTypeWithQualityHeaderValue("application/json"));

        var footballQuestions = client.GetFromJsonAsync<List<FootballQuestion>>($"https://luna-api-fbbwbveqambydvcy.eastus2-01.azurewebsites.net/FootballQuestion/GetQuizFootballQuestions?numberOfQuestions=1").Result;

        var googleAI = new GoogleAi(Configuration["GoogleAI:ApiKey"]);
        var model = googleAI.CreateGenerativeModel("models/gemini-2.5-flash-preview-05-20");

        isLoading = true;
        errorMessage = "";

        quizQuestions = new List<QuizQuestion>();

        try
        {
            foreach (var question in footballQuestions)
            {
                var prompt = $"Generate 4 multiple choice answers for the following question: \"{question.Question}\". One of the four choices should be: \"{question.Ruling}\". The other 3 choices should be in the same format. Return the answer in JSON format. The JSON should have the following format: {{\"choice1\": \"<choice1>\", \"choice2\":\"<choice2>\", \"choice3\":\"<choice3>\", \"choice4\":\"<choice4>\"}}";
                var result = await model.GenerateContentAsync(prompt);
                var jsonResponse = CleanJsonWrapper(result.Text);
                var choices = JsonConvert.DeserializeObject<Choice>(jsonResponse);
                
                quizQuestions.Add(new QuizQuestion
                {
                    Question = question.Question,
                    Choices = choices
                });
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }

    public static string CleanJsonWrapper(string input)
    {
        if (string.IsNullOrEmpty(input))
        {
            return input; // Return null or empty if the input is null or empty
        }

        string prefix = "```json";
        string suffix = "```";

        string cleanedString = input.Trim(); // Remove any leading/trailing whitespace

        // Check and remove prefix
        if (cleanedString.StartsWith(prefix, StringComparison.OrdinalIgnoreCase))
        {
            cleanedString = cleanedString.Substring(prefix.Length);
        }

        // Check and remove suffix
        if (cleanedString.EndsWith(suffix, StringComparison.OrdinalIgnoreCase))
        {
            cleanedString = cleanedString.Substring(0, cleanedString.Length - suffix.Length);
        }

        return cleanedString.Trim(); // Trim again in case of spaces introduced by substring
    }
}