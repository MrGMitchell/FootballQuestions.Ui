@page "/practice"
@rendermode InteractiveServer

@inject IConfiguration Configuration
@inject IFootballQuestionService FootballQuestionService
@inject NavigationManager NavManager

@using System.Net.Http.Json
@using System.Text
@using FootballQuestions.Ui.Models
@using FootballQuestions.Ui.Services
@using GenerativeAI
@using System.Net.Http.Headers
@using Newtonsoft.Json

<PageTitle>Practice</PageTitle>

@if (currentQuestion != null)
{
    <div class="border rounded p-2 mb-2 fs-4 text-center fw-semibold">Question @(currentQuestionIndex + 1) of
        @questions.Count</div>

    <div class="border rounded p-2 mb-2 bg-info-subtle fw-bold fs-3">@currentQuestion.Question</div>

    <div class="options-container">
        @foreach (var option in currentQuestion?.Choices ?? Enumerable.Empty<string>())
        {
            <button class="btn @GetOptionButtonClass(option)" @onclick="() => SelectAnswer(option)"
                disabled="@(userAnswers.Any(ua => ua.QuestionId == currentQuestion.QuestionId))">
                @option
            </button>
        }
    </div>

    <div class="navigation-buttons my-4 d-flex justify-content-between">
        <div class="container-fluid d-grid">
            <button class="btn btn-outline-secondary" @onclick="PreviousQuestion" disabled="@(currentQuestionIndex == 0)">
                Previous
            </button>
        </div>
        <div class="container-fluid d-grid">
            <button class="btn btn-outline-primary" @onclick="NextQuestion"
                disabled="@(currentQuestionIndex == questions.Count - 1 || !userAnswers.Any(ua => ua.QuestionId == currentQuestion.QuestionId))">
                Next
            </button>
        </div>
        @if (currentQuestionIndex == questions.Count - 1 && userAnswers.Count == questions.Count)
        {
            <div class="container-fluid d-grid">
                <button class="btn btn-outline-success" @onclick="FinishQuiz">
                    Finish Quiz
                </button>
            </div>
        }
    </div>
}
else
{
    <p>Loading quiz...</p>
}


@code {
    private List<QuizQuestion> questions = new();
    private QuizQuestion? currentQuestion => questions.Count > 0 ? questions[currentQuestionIndex] : null;
    private int currentQuestionIndex = 0;
    private List<UserAnswer> userAnswers = new List<UserAnswer>();

    protected override async Task OnInitializedAsync()
    {
        questions = await FootballQuestionService.GetQuizFootballQuestions() ?? new List<QuizQuestion>();
        // You might want to shuffle questions here:
        foreach (var question in questions)
        {
            question.Choices = question.Choices.OrderBy(c => Guid.NewGuid()).ToList();
        }
    }

    private void SelectAnswer(string selectedOption)
    {
        // Prevent re-answering the same question
        if (currentQuestion == null || userAnswers.Any(ua => ua.QuestionId == currentQuestion.QuestionId))
        {
            return;
        }

        var isCorrect = (selectedOption.Trim() == currentQuestion.CorrectAnswer.Trim());

        userAnswers.Add(new UserAnswer
        {
            QuestionId = currentQuestion.QuestionId,
            SelectedAnswer = selectedOption,
            IsCorrect = isCorrect
        });
    }

    private void NextQuestion()
    {
        if (currentQuestionIndex < questions.Count - 1)
        {
            currentQuestionIndex++;
        }
    }

    private void PreviousQuestion()
    {
        if (currentQuestionIndex > 0)
        {
            currentQuestionIndex--;
        }
    }

    private void FinishQuiz()
    {
        // Store userAnswers in a service or pass via QueryString/State management
        // For simplicity, we'll store it statically (not recommended for production)
        // Or better, use a persistent state service/component.
        QuizState.UserQuizAnswers = userAnswers;
        QuizState.AllQuestions = questions; // Pass all questions to results page

        NavManager.NavigateTo("/results");
    }

    private string GetOptionButtonClass(string option)
    {
        if (currentQuestion == null)
        {
            return "btn-outline-secondary";
        }

        var userAnswer = userAnswers.FirstOrDefault(ua => ua.QuestionId == currentQuestion.QuestionId);

        if (userAnswer != null)
        {
            if (option.Trim() == currentQuestion.CorrectAnswer.Trim())
            {
                return "btn-success"; // Correct answer
            }
            else if (option == userAnswer.SelectedAnswer)
            {
                return "btn-danger"; // User's incorrect answer
            }
            else
            {
                return "btn-secondary"; // Other options for an answered question
            }
        }
        return "btn-outline-secondary"; // Default for unanswered options
    }
}