@page "/practice"
@rendermode InteractiveServer

@inject IConfiguration Configuration
@inject IFootballQuestionService FootballQuestionService

@using System.Net.Http.Json
@using System.Text
@using FootballQuestions.Ui.Models
@using FootballQuestions.Ui.Services
@using GenerativeAI
@using System.Net.Http.Headers
@using Newtonsoft.Json

<PageTitle>Practice</PageTitle>

@if (!quizQuestions.Any()) {
    <button class="btn btn-primary mt-2" @onclick="SendMessage" disabled="@isLoading">
        @if (isLoading)
        {
            <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
            <span> Loading...</span>
        }
        else
        {
            <span>Get Question</span>
        }
    </button>
}

@if (!string.IsNullOrEmpty(errorMessage)) {
    <div class="alert alert-danger mt-3" role="alert">
        @errorMessage
    </div>
}

@if (quizQuestions.Any()) {
    <div class="mt-3">
        @foreach (var question in quizQuestions){
            <div class="card mt-3">
                <div class="card-header">
                    <h5>@question.Question</h5>
                </div>
                <div class="card-body">
                    <div class="btn-group-vertical" role="group" aria-label="Vertical radio toggle button group">
                        <input type="radio" class="btn-check" name="choice" id="choice1" autocomplete="off">
                        <label class="btn btn-outline-success" for="choice1">@question.Choices?.Choice1</label>
                        <input type="radio" class="btn-check" name="choice" id="choice2" autocomplete="off">
                        <label class="btn btn-outline-success" for="choice2">@question.Choices?.Choice2</label>
                        <input type="radio" class="btn-check" name="choice" id="choice3" autocomplete="off">
                        <label class="btn btn-outline-success" for="choice3">@question.Choices?.Choice3</label>
                        <input type="radio" class="btn-check" name="choice" id="choice4" autocomplete="off">
                        <label class="btn btn-outline-success" for="choice4">@question.Choices?.Choice4</label>
                    </div>
                </div>
            </div>
        }
    </div>
}

@code {
    private List<QuizQuestion> quizQuestions = new();
    private string errorMessage = "";
    private bool isLoading = false;
    private Choice choices = new();

    private async Task SendMessage()
    {
        errorMessage = ""; // Clear previous error
        isLoading = true;   // Set loading state to true FIRST
        quizQuestions = new List<QuizQuestion>(); // Clear questions
        StateHasChanged(); // <<< IMPORTANT: Force UI re-render immediately

        try
        {
            var footballQuestions = await FootballQuestionService.GetQuizFootballQuestions(); // First API call

            if (footballQuestions == null || !footballQuestions.Any())
            {
                errorMessage = "No football questions retrieved.";
                return; // Exit if no questions to process
            }

            var googleAI = new GoogleAi(Configuration["GoogleAI"]);
            var model = googleAI.CreateGenerativeModel(Configuration["GoogleAiModel"]);

            foreach (var question in footballQuestions)
            {
                var prompt = $"Generate 4 multiple choice answers for the following question: \"{question.Question}\". One of the four choices should be: \"{question.Ruling}\". The other 3 choices should be in the same format. Return the answer in JSON format. The JSON should have the following format: {{\"choice1\": \"<choice1>\", \"choice2\":\"<choice2>\", \"choice3\":\"<choice3>\", \"choice4\":\"<choice4>\"}}";

                // Consider adding a timeout to the AI call if it can be slow
                var result = await model.GenerateContentAsync(prompt);
                var jsonResponse = CleanJsonWrapper(result.Text);

                // Add robust deserialization handling
                try
                {
                    var choices = JsonConvert.DeserializeObject<Choice>(jsonResponse);
                    if (choices != null)
                    {
                        quizQuestions.Add(new QuizQuestion
                        {
                            Question = question.Question,
                            Choices = choices
                        });
                    }
                    else
                    {
                        Console.Error.WriteLine($"Warning: Deserialized choices were null for question: {question.Question}");
                    }
                }
                catch (JsonException jsonEx)
                {
                    Console.Error.WriteLine($"JSON deserialization error for question '{question.Question}': {jsonEx.Message}. Raw JSON: {jsonResponse}");
                    errorMessage = "Error processing some question data.";
                    // Optionally, skip this question or handle it differently
                }
            }
        }
        catch (HttpRequestException httpEx)
        {
            // Specific handling for network/API errors
            errorMessage = $"Network or API error: {httpEx.Message}";
            Console.Error.WriteLine($"HttpRequestException: {httpEx}");
        }
        catch (Exception ex)
        {
            // General error handling
            errorMessage = $"An unexpected error occurred: {ex.Message}";
            Console.Error.WriteLine($"General Exception: {ex}");
        }
        finally
        {
            isLoading = false; // Always turn off loading state
            StateHasChanged(); // <<< IMPORTANT: Force UI re-render after loading is done/error occurred
        }
    }

    public static string CleanJsonWrapper(string input)
    {
        if (string.IsNullOrEmpty(input))
        {
            return input; // Return null or empty if the input is null or empty
        }

        string prefix = "```json";
        string suffix = "```";

        string cleanedString = input.Trim(); // Remove any leading/trailing whitespace

        // Check and remove prefix
        if (cleanedString.StartsWith(prefix, StringComparison.OrdinalIgnoreCase))
        {
            cleanedString = cleanedString.Substring(prefix.Length);
        }

        // Check and remove suffix
        if (cleanedString.EndsWith(suffix, StringComparison.OrdinalIgnoreCase))
        {
            cleanedString = cleanedString.Substring(0, cleanedString.Length - suffix.Length);
        }

        return cleanedString.Trim(); // Trim again in case of spaces introduced by substring
    }
}